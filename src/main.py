import asyncio
import sqlite3
import logging
from datetime import datetime, timedelta
from enum import Enum

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.base import ConflictingIdError
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, ConversationHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "8117325876:AAFoCLi1Zp92akEQC3y5muM5gvqDlaC2SMo"
DB_NAME = "reminders.db"

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
SET_TEXT, SET_DATE, SET_TIME = range(3)  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
SET_DURATION, SET_TIMER_TEXT = range(3, 5)  # –î–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
SET_REPEAT_INTERVAL, SET_REPEAT_DAYS = range(5, 7)  # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

# –¢–∏–ø—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
class RepeatType(Enum):
    NONE = 0
    DAILY = 1
    WEEKLY = 2
    CUSTOM = 3


# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ReminderBot:
    def __init__(self):
        self.scheduler = BackgroundScheduler()
        self.scheduler.start()
        self.application = None

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã
        self.scheduler.add_job(
            self._cleanup_db_wrapper,
            'interval',
            hours=1,
            next_run_time=datetime.now() + timedelta(minutes=1)
        )

    @staticmethod
    def cleanup_db():
        """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(DB_NAME) as conn:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏
            conn.execute("DELETE FROM reminders WHERE datetime(time) <= datetime('now') AND repeat_type = 0")
            conn.commit()

    def _cleanup_db_wrapper(self):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.cleanup_db()

    def h(self):
        with sqlite3.connect(DB_NAME) as conn:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏
            conn.execute("DELETE FROM reminders WHERE datetime(time) <= datetime('now') AND repeat_type = 0")
            conn.commit()

    def init_db(self):
        with sqlite3.connect(DB_NAME) as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            conn.execute("""
                         CREATE TABLE IF NOT EXISTS reminders
                         (
                             id
                             INTEGER
                             PRIMARY
                             KEY
                             AUTOINCREMENT,
                             user_id
                             INTEGER
                             NOT
                             NULL,
                             text
                             TEXT
                             NOT
                             NULL,
                             time
                             TEXT
                             NOT
                             NULL,
                             job_id
                             TEXT
                             NOT
                             NULL
                             UNIQUE,
                             is_timer
                             BOOLEAN
                             NOT
                             NULL
                             DEFAULT
                             FALSE,
                             repeat_type
                             INTEGER
                             NOT
                             NULL
                             DEFAULT
                             0,
                             repeat_interval
                             INTEGER,
                             next_run
                             TEXT
                         )
                         """)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
            cursor = conn.execute("PRAGMA table_info(reminders)")
            columns = [column[1] for column in cursor.fetchall()]

            if 'repeat_type' not in columns:
                conn.execute("ALTER TABLE reminders ADD COLUMN repeat_type INTEGER NOT NULL DEFAULT 0")
            if 'repeat_interval' not in columns:
                conn.execute("ALTER TABLE reminders ADD COLUMN repeat_interval INTEGER")
            if 'next_run' not in columns:
                conn.execute("ALTER TABLE reminders ADD COLUMN next_run TEXT")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            conn.execute("DELETE FROM reminders WHERE datetime(time) <= datetime('now') AND repeat_type = 0")
            conn.commit()

    async def send_reminder(self, user_id: int, text: str, job_id: str):
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}"
            )

            with sqlite3.connect(DB_NAME) as conn:
                reminder = conn.execute(
                    "SELECT repeat_type, repeat_interval, time FROM reminders WHERE job_id = ?",
                    (job_id,)
                ).fetchone()

                if reminder and reminder[0] > 0:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    repeat_type = reminder[0]
                    interval = reminder[1]
                    last_run = datetime.fromisoformat(reminder[2])

                    if repeat_type == RepeatType.DAILY.value:
                        next_run = last_run + timedelta(days=1)
                    elif repeat_type == RepeatType.WEEKLY.value:
                        next_run = last_run + timedelta(weeks=1)
                    elif repeat_type == RepeatType.CUSTOM.value and interval:
                        next_run = last_run + timedelta(days=interval)
                    else:
                        next_run = None

                    if next_run:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
                        conn.execute(
                            "UPDATE reminders SET time = ?, next_run = ? WHERE job_id = ?",
                            (next_run.isoformat(), next_run.isoformat(), job_id)
                        )
                        conn.commit()

                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        try:
                            self.scheduler.add_job(
                                self.sync_send_reminder,
                                'date',
                                run_date=next_run,
                                args=[user_id, text, job_id],
                                id=job_id
                            )
                        except ConflictingIdError:
                            logger.warning(f"Job {job_id} already exists, skipping")
                else:
                    # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    conn.execute("DELETE FROM reminders WHERE job_id = ?", (job_id,))
                    conn.commit()
                    if self.scheduler.get_job(job_id):
                        self.scheduler.remove_job(job_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å
            with sqlite3.connect(DB_NAME) as conn:
                conn.execute("DELETE FROM reminders WHERE job_id = ?", (job_id,))
                conn.commit()
            if self.scheduler.get_job(job_id):
                self.scheduler.remove_job(job_id)

    def sync_send_reminder(self, user_id: int, text: str, job_id: str):
        loop = asyncio.new_event_loop()
        try:
            loop.run_until_complete(self.send_reminder(user_id, text, job_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            loop.close()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/remind ‚Äî —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
            "/repeat ‚Äî –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∏–ª–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º)\n"
            "/timer ‚Äî —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ X –≤—Ä–µ–º–µ–Ω–∏\n"
            "/list ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞"
        )

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(context, '_cancel_processed') and context._cancel_processed:
            return ConversationHandler.END

        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        context._cancel_processed = True

        user = update.effective_user
        logger.info("User %s canceled the conversation.", user.first_name)

        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()

        await update.message.reply_text(
            "‚ùå –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove()
        )

        return ConversationHandler.END

    async def start_remind(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return SET_TEXT

    async def get_remind_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['text'] = update.message.text
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return SET_DATE

    async def get_remind_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            datetime.strptime(update.message.text, "%d.%m.%Y")
            context.user_data['date'] = update.message.text
            await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
            return SET_TIME
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return SET_DATE

    async def get_remind_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            dt_str = f"{context.user_data['date']} {update.message.text}"
            remind_time = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")

            if remind_time <= datetime.now():
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!")
                return ConversationHandler.END

            job_id = f"rem_{update.effective_user.id}_{datetime.now().timestamp()}"

            with sqlite3.connect(DB_NAME) as conn:
                conn.execute(
                    "INSERT INTO reminders VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?)",
                    (update.effective_user.id, context.user_data['text'],
                     remind_time.isoformat(), job_id, False,
                     RepeatType.NONE.value, None, None)
                )
                conn.commit()

            self.scheduler.add_job(
                self.sync_send_reminder, 'date',
                run_date=remind_time,
                args=[update.effective_user.id, context.user_data['text'], job_id],
                id=job_id
            )

            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time.strftime('%d.%m.%Y %H:%M')}")
            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ß–ß:–ú–ú")
            return SET_TIME

    async def start_repeat_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return SET_TEXT

    async def get_repeat_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['text'] = update.message.text
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return SET_DATE

    async def get_repeat_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            datetime.strptime(update.message.text, "%d.%m.%Y")
            context.user_data['date'] = update.message.text
            await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
            return SET_TIME
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return SET_DATE

    async def get_repeat_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            dt_str = f"{context.user_data['date']} {update.message.text}"
            first_run = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")

            if first_run <= datetime.now():
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!")
                return ConversationHandler.END

            context.user_data['first_run'] = first_run

            keyboard = [
                [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="daily")],
                [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="weekly")],
                [InlineKeyboardButton("–° –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–≤ –¥–Ω—è—Ö)", callback_data="custom")]
            ]

            await update.message.reply_text(
                "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SET_REPEAT_INTERVAL
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ß–ß:–ú–ú")
            return SET_TIME

    async def set_repeat_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        repeat_type = query.data
        context.user_data['repeat_type'] = repeat_type
        first_run = context.user_data['first_run']
        text = context.user_data['text']

        if repeat_type == "custom":
            await query.edit_message_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è):")
            return SET_REPEAT_DAYS
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            interval = 1 if repeat_type == "daily" else 7
            context.user_data['interval'] = interval

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            repeat_text = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" if repeat_type == "daily" else "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
            confirm_text = f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {first_run.strftime('%d.%m.%Y %H:%M')} ({repeat_text})"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await query.edit_message_text(confirm_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            return await self.save_repeat_reminder(update, context)

    async def set_repeat_days(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            interval = int(update.message.text)
            if interval < 1:
                raise ValueError

            context.user_data['interval'] = interval
            first_run = context.user_data['first_run']
            text = context.user_data['text']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            repeat_text = f"–∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π"
            confirm_text = f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {first_run.strftime('%d.%m.%Y %H:%M')} ({repeat_text})"

            await update.message.reply_text(confirm_text)
            return await self.save_repeat_reminder(update, context)
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
            return SET_REPEAT_DAYS

    async def save_repeat_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        first_run = context.user_data['first_run']
        text = context.user_data['text']
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.message.from_user.id
        job_id = f"repeat_{user_id}_{datetime.now().timestamp()}"

        repeat_type = context.user_data['repeat_type']
        interval = context.user_data.get('interval', 1)

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute(
                "INSERT INTO reminders VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?)",
                (user_id, text, first_run.isoformat(), job_id, False,
                 RepeatType.DAILY.value if repeat_type == "daily" else RepeatType.WEEKLY.value if repeat_type == "weekly" else RepeatType.CUSTOM.value,
                 interval, first_run.isoformat())
            )
            conn.commit()

        self.scheduler.add_job(
            self.sync_send_reminder, 'date',
            run_date=first_run,
            args=[user_id, text, job_id],
            id=job_id
        )

        context.user_data.clear()
        return ConversationHandler.END

    async def start_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30s, 5m, 1h):")
        return SET_DURATION

    async def get_timer_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            txt = update.message.text.lower()
            if txt.endswith('s'):
                delta = timedelta(seconds=int(txt[:-1]))
            elif txt.endswith('m'):
                delta = timedelta(minutes=int(txt[:-1]))
            elif txt.endswith('h'):
                delta = timedelta(hours=int(txt[:-1]))
            else:
                raise ValueError
            context.user_data['delta'] = delta
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
            return SET_TIMER_TEXT
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 5m, 30s, 1h")
            return SET_DURATION

    async def get_timer_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        remind_time = datetime.now() + context.user_data['delta']
        job_id = f"timer_{update.effective_user.id}_{datetime.now().timestamp()}"

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute(
                "INSERT INTO reminders VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?)",
                (update.effective_user.id, update.message.text,
                 remind_time.isoformat(), job_id, True,
                 RepeatType.NONE.value, None, None)
            )
            conn.commit()

        self.scheduler.add_job(
            self.sync_send_reminder, 'date',
            run_date=remind_time,
            args=[update.effective_user.id, update.message.text, job_id],
            id=job_id
        )

        await update.message.reply_text(f"‚è≥ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {context.user_data['delta']}")
        return ConversationHandler.END

    async def list_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        with sqlite3.connect(DB_NAME) as conn:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            conn.execute("DELETE FROM reminders WHERE datetime(time) <= datetime('now') AND repeat_type = 0")
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminders = conn.execute("""
                                     SELECT text, time, job_id, is_timer, repeat_type, repeat_interval
                                     FROM reminders
                                     WHERE user_id = ? AND (datetime(time) > datetime('now') OR repeat_type > 0)
                                     ORDER BY time
                                     """, (user_id,)).fetchall()

        if not reminders:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        msg = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        keyboard = []
        for text, time_str, job_id, is_timer, repeat_type, interval in reminders:
            dt = datetime.fromisoformat(time_str)

            if is_timer:
                time_desc = f"—á–µ—Ä–µ–∑ {str(dt - datetime.now()).split('.')[0]}"
            elif repeat_type == RepeatType.DAILY.value:
                time_desc = f"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {dt.strftime('%H:%M')} (—Å–ª–µ–¥.: {dt.strftime('%d.%m.%Y')})"
            elif repeat_type == RepeatType.WEEKLY.value:
                time_desc = f"–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ {dt.strftime('%A')} –≤ {dt.strftime('%H:%M')} (—Å–ª–µ–¥.: {dt.strftime('%d.%m.%Y')})"
            elif repeat_type == RepeatType.CUSTOM.value and interval:
                time_desc = f"–∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π –≤ {dt.strftime('%H:%M')} (—Å–ª–µ–¥.: {dt.strftime('%d.%m.%Y')})"
            else:
                time_desc = dt.strftime('%d.%m.%Y %H:%M')

            msg += f"{'‚è∞' if not is_timer else '‚è≥'} {time_desc} ‚Äî {text}\n"
            keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å: {text[:15]}...", callback_data=f"del_{job_id}")])

        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

    async def delete_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        job_id = query.data.split("_", 1)[1]
        user_id = query.from_user.id

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("DELETE FROM reminders WHERE job_id = ? AND user_id = ?", (job_id, user_id))
            conn.commit()

        if self.scheduler.get_job(job_id):
            self.scheduler.remove_job(job_id)

        await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        await self.list_reminders(update, context)

    def run(self):
        self.init_db()

        app = Application.builder().token(TOKEN).build()
        self.application = app

        # –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ cancel

        # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("list", self.list_reminders))
        app.add_handler(CallbackQueryHandler(self.delete_reminder, pattern=r"^del_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ConversationHandler —Å –æ–±—â–∏–º fallback
        cancel_handler = CommandHandler("cancel", self.cancel)

        conv_handler_remind = ConversationHandler(
            entry_points=[CommandHandler("remind", self.start_remind)],
            states={
                SET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_remind_text)],
                SET_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_remind_date)],
                SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_remind_time)],
            },
            fallbacks=[cancel_handler],
        )

        conv_handler_repeat = ConversationHandler(
            entry_points=[CommandHandler("repeat", self.start_repeat_reminder)],
            states={
                SET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_repeat_text)],
                SET_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_repeat_date)],
                SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_repeat_time)],
                SET_REPEAT_INTERVAL: [CallbackQueryHandler(self.set_repeat_type)],
                SET_REPEAT_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_repeat_days)],
            },
            fallbacks=[cancel_handler],
        )

        conv_handler_timer = ConversationHandler(
            entry_points=[CommandHandler("timer", self.start_timer)],
            states={
                SET_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_timer_duration)],
                SET_TIMER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_timer_text)],
            },
            fallbacks=[cancel_handler],
        )

        app.add_handler(conv_handler_remind)
        app.add_handler(conv_handler_repeat)
        app.add_handler(conv_handler_timer)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã
        with sqlite3.connect(DB_NAME) as conn:
            for user_id, text, time_str, job_id, is_timer, repeat_type, interval, next_run in conn.execute(
                    "SELECT user_id, text, time, job_id, is_timer, repeat_type, repeat_interval, next_run "
                    "FROM reminders WHERE datetime(time) > datetime('now') OR repeat_type > 0"
            ).fetchall():
                dt = datetime.fromisoformat(time_str)
                try:
                    self.scheduler.add_job(
                        self.sync_send_reminder, 'date',
                        run_date=dt,
                        args=[user_id, text, job_id],
                        id=job_id
                    )
                except ConflictingIdError:
                    logger.warning(f"Job with id {job_id} already exists, skipping")

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()


if __name__ == "__main__":
    ReminderBot().run()